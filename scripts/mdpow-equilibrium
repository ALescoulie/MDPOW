#!/usr/bin/env python
"""%prog [options] RUNFILE

Set up (and possibly run) the equilibration equilibrium simulation for one
compound and one solvent. All parameters except the solvent are specified in
the RUNFILE. See the documentation (TO BE WRITTEN) or the example file in
``doc/example/equilibrium.cfg``.

You will require:

  1. at least Gromacs 4.0.5 ready to run (check that all commands can
     be found)
  2. a structure file (PDB, GRO) for the compound
  3. a Gromacs ITP file for the compound (OPLS/AA force field)

"""

# TODO:
#
#  1) Implement checkpointing so that one can stop the script, run simulation
#     (e.g. on cluster) then start script again at the stage where it uses the
#     newly generated files.
#
#     Will require
#       - unique identifier for the run
#       - some sort of journal to mark state
#       - storing of state information (Simulation pickle file -- already usable)
#
#  2) Default config file in user's home dir.
from __future__ import with_statement

import os, errno
from ConfigParser import SafeConfigParser
from pkg_resources import resource_filename

from gromacs.utilities import in_dir
from gromacs.run import MDrunner

import mdpow.equil

import logging
logger = logging.getLogger('mdpow')

defaults = {
    "runinput": resource_filename(mdpow.__name__, "templates/runinput.cfg"),
    }

class MDrunnerSimple(MDrunner):
    """Gromacs mdrun.

    Use Gromacs 4.5.x with threaded mdrun to get max performance and
    just leave everything as it is. For older version you can change
    the name and add a mpiexec binary to launch a multiprocessor
    job. See :mod:`gromacs.run` for details.

    """
    mdrun = "mdrun"
    mpiexec = None

class POWConfigParser(SafeConfigParser):
    def get(self, section, option):
        """Return option as string, unless its "None/NONE/none" --> ``None``"""
        value = SafeConfigParser.get(self, section, option)
        if value.lower() == "none":
            return None
        return value
    def getpath(self, section, option):
        """Return option as an expanded path."""
        return os.path.expanduser(os.path.expandvars(self.get(section, option)))
    def getlist(self, section, option):
        """Return option as a list of strings.

        *option* must be comma-separated; leading/trailing whitespace
        is stripped and quotes are treated verbatim.
        """
        return [x.strip() for x in str(self.get(section, option)).split(",")]

def get_configuration(filename=None):
    """Reads and parses a run input config file.

    Uses the package-bundled defaults as a basis.
    """
    cfg = POWConfigParser()
    cfg.readfp(open(defaults["runinput"]))
    logger.debug("Loaded runinput defaults from %r", defaults["runinput"])
    if not filename is None:
        cfg.readfp(open(filename))   # override package defaults
        logger.debug("Loaded user runinput from %r", filename)
    else:
        logger.warning("Running with package defaults for the run; you should supply a runinput file!")
    return cfg

def checkpoint(name, sim, filename):
    logger.info("checkpoint: %(name)s", vars())
    sim.save(filename)
    # xxx
    # - should log checkpoint to a journal so that we can restart again
    # - should have generated a unique ID to continue

def equilibrium_simulation(cfg, solvent, **kwargs):
    """Set up and run equilibrium simulation.

    See tutorial for the individual steps.

    .. Note:: Depending on the settings in the run input file
       (``runlocal``), :program:`mdrun` is executed at various stages,
       and hence this process can take a while.
    """
    Simulations = {
        'water': mdpow.equil.WaterSimulation,
        'octanol': mdpow.equil.OctanolSimulation,
        }
    try:
        Simulation = Simulations[solvent]
    except KeyError:
        raise ValueError("solvent must be 'water' or 'octanol'")

    def MD(protocol, savefilename):
        # setup simulation
        simulation_protocol = S.get_protocol(protocol)
        params = simulation_protocol(runtime=cfg.getfloat(protocol, "runtime"),
                                     qscript=cfg.getlist(protocol, "qscript"))
        checkpoint(protocol, S, savefilename)

        # run simulation
        simulation_done = False
        if cfg.getboolean(protocol, "runlocal"):
            logger.info("Running %s (%s.log) ... stand by.", protocol, params['deffnm'])
            logger.info("Run directory: %s", S.dirs[protocol])
            mdrun = MDrunnerSimple(dirname=S.dirs[protocol], deffnm=params['deffnm'],
                                   v=cfg.getboolean('mdrun','verbose'),
                                   stepout=cfg.getint('mdrun','stepout'),
                                   nice=cfg.getint('mdrun','nice'),
                                   nt=cfg.get('mdrun','maxthreads'),
                                   cpi=True, append=True)
            simulation_done = mdrun.run_check()
            if not simulation_done:
                # should probably stop
                logger.critical("Failed %(protocol)s, investigate manually.", vars())
                sys.exit(1)
        else:
            logger.info("Now go and run %(protocol)s in the MD_relaxed dir %r.", protocol, S.dirs[protocol])
            logger.warn("You will have to complete the whole thing manually until proper checkpointing is implemented")
            sys.exit(0)
        return simulation_done

    # generate a canonical path under dirname
    topdir = kwargs.get("dirname", None)
    if topdir is None:
        topdir = cfg.get("setup", "molecule")
    dirname = os.path.join(topdir, Simulation.dirname_default)
    savefilename = os.path.join(topdir, "%(solvent)s.simulation" % vars())

    # start pipeline
    S = Simulation(molecule=cfg.get("setup", "molecule"), dirname=dirname)
    S.topology(itp=cfg.getpath("setup", "itp"))
    S.solvate(struct=cfg.getpath("setup", "structure"))
    S.energy_minimize()

    MD("MD_relaxed", savefilename)
    # should be able to restart from here
    MD("MD_NPT", savefilename)
    # should be able to restart from here

    return savefilename


if __name__ == "__main__":
    import sys
    import os.path
    from optparse import OptionParser

    parser = OptionParser(usage=__doc__)
    parser.add_option('--solvent', '-S', dest='solvent',
                      metavar="NAME",
                      help="solvent NAME for compound, 'water' or 'octanol' [%default]")
    parser.add_option('--dirname', '-d', dest='dirname',
                      metavar="DIRECTORY",
                      help="generate files and directories in DIRECTORY, which is created "
                      "if it does not already exist. The default is to use the molecule "
                      "identifier fom the run input file.")
    parser.add_option('--force', dest='force',
                      action="store_true",
                      help="XXX force re-reading all data [%default]")
    parser.set_defaults(solvent="water", dirname=None, force=False, permissive=False)
    opts,args = parser.parse_args()

    if len(args) == 0:
        logger.fatal("A run input file is required See --help.")
        sys.exit(1)

    runfile = args[0]
    if not os.path.exists(runfile):
            logger.fatal("Run input file %r not found...", runfile)
            sys.exit(1)

    cfg = get_configuration(runfile)
    S = equilibrium_simulation(cfg, opts.solvent, dirname=opts.dirname)



